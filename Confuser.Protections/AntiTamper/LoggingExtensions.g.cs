//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Confuser.Protections.AntiTamper {
	
	
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
	internal static class LoggingExtensions {
		
		private static System.Action<Microsoft.Extensions.Logging.ILogger, dnlib.DotNet.IModule, System.Exception> _normalModeStart = Microsoft.Extensions.Logging.LoggerMessage.Define<dnlib.DotNet.IModule>(Microsoft.Extensions.Logging.LogLevel.Debug, new Microsoft.Extensions.Logging.EventId(10101, "prot-101"), "Normal anti tamper protection processing {module}.");
		
		private static System.Action<Microsoft.Extensions.Logging.ILogger, dnlib.DotNet.IModule, System.Exception> _normalModeInjectStart = Microsoft.Extensions.Logging.LoggerMessage.Define<dnlib.DotNet.IModule>(Microsoft.Extensions.Logging.LogLevel.Trace, new Microsoft.Extensions.Logging.EventId(10102, "prot-102"), "Normal anti tamper protection injecting runtime into {module}");
		
		private static System.Action<Microsoft.Extensions.Logging.ILogger, System.Exception> _normalModeRuntimeMissing = Microsoft.Extensions.Logging.LoggerMessage.Define(Microsoft.Extensions.Logging.LogLevel.Warning, new Microsoft.Extensions.Logging.EventId(10103, "prot-103"), "Runtime implementation for \"Normal\" anti tamper protection not found.");
		
		private static System.Action<Microsoft.Extensions.Logging.ILogger, dnlib.DotNet.IModule, System.Exception> _normalModeInjectDone = Microsoft.Extensions.Logging.LoggerMessage.Define<dnlib.DotNet.IModule>(Microsoft.Extensions.Logging.LogLevel.Trace, new Microsoft.Extensions.Logging.EventId(10104, "prot-104"), "Normal anti tamper protection runtime injection into {module} done.");
		
		private static System.Action<Microsoft.Extensions.Logging.ILogger, System.Exception> _jitModeRuntimeMissing = Microsoft.Extensions.Logging.LoggerMessage.Define(Microsoft.Extensions.Logging.LogLevel.Warning, new Microsoft.Extensions.Logging.EventId(10105, "prot-105"), "Runtime implementation for \"JIT\" anti tamper protection not found.");
		
		/// <summary>
		/// Show the following Debug log entry:
		/// <br/>
		/// Normal anti tamper protection processing {module}.
		/// </summary>
		/// <exception cref="System.ArgumentNullException"><paramref name="logger"/> is <see langword="null"/></exception>
		/// <remarks>
		/// Log Event ID: <c>prot-101</c>
		/// </remarks>
		internal static void LogMsgNormalModeStart(this Microsoft.Extensions.Logging.ILogger logger, dnlib.DotNet.IModule module) {
			if ((logger == null)) {
				throw new System.ArgumentNullException("logger");
			}
			_normalModeStart.Invoke(logger, module, null);
		}
		
		/// <summary>
		/// Show the following Trace log entry:
		/// <br/>
		/// Normal anti tamper protection injecting runtime into {module}
		/// </summary>
		/// <exception cref="System.ArgumentNullException"><paramref name="logger"/> is <see langword="null"/></exception>
		/// <remarks>
		/// Log Event ID: <c>prot-102</c>
		/// </remarks>
		internal static void LogMsgNormalModeInjectStart(this Microsoft.Extensions.Logging.ILogger logger, dnlib.DotNet.IModule module) {
			if ((logger == null)) {
				throw new System.ArgumentNullException("logger");
			}
			_normalModeInjectStart.Invoke(logger, module, null);
		}
		
		/// <summary>
		/// Show the following Warning log entry:
		/// <br/>
		/// Runtime implementation for "Normal" anti tamper protection not found.
		/// </summary>
		/// <exception cref="System.ArgumentNullException"><paramref name="logger"/> is <see langword="null"/></exception>
		/// <remarks>
		/// Log Event ID: <c>prot-103</c>
		/// </remarks>
		internal static void LogMsgNormalModeRuntimeMissing(this Microsoft.Extensions.Logging.ILogger logger) {
			if ((logger == null)) {
				throw new System.ArgumentNullException("logger");
			}
			_normalModeRuntimeMissing.Invoke(logger, null);
		}
		
		/// <summary>
		/// Show the following Trace log entry:
		/// <br/>
		/// Normal anti tamper protection runtime injection into {module} done.
		/// </summary>
		/// <exception cref="System.ArgumentNullException"><paramref name="logger"/> is <see langword="null"/></exception>
		/// <remarks>
		/// Log Event ID: <c>prot-104</c>
		/// </remarks>
		internal static void LogMsgNormalModeInjectDone(this Microsoft.Extensions.Logging.ILogger logger, dnlib.DotNet.IModule module) {
			if ((logger == null)) {
				throw new System.ArgumentNullException("logger");
			}
			_normalModeInjectDone.Invoke(logger, module, null);
		}
		
		/// <summary>
		/// Show the following Warning log entry:
		/// <br/>
		/// Runtime implementation for "JIT" anti tamper protection not found.
		/// </summary>
		/// <exception cref="System.ArgumentNullException"><paramref name="logger"/> is <see langword="null"/></exception>
		/// <remarks>
		/// Log Event ID: <c>prot-105</c>
		/// </remarks>
		internal static void LogMsgJitModeRuntimeMissing(this Microsoft.Extensions.Logging.ILogger logger) {
			if ((logger == null)) {
				throw new System.ArgumentNullException("logger");
			}
			_jitModeRuntimeMissing.Invoke(logger, null);
		}
	}
}
