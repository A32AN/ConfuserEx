//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Confuser.Optimizations.CompileRegex {
	
	
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
	internal static class LoggingExtensions {
		
		private static System.Action<Microsoft.Extensions.Logging.ILogger, dnlib.DotNet.IModule, System.Exception> _inspectingModule = Microsoft.Extensions.Logging.LoggerMessage.Define<dnlib.DotNet.IModule>(Microsoft.Extensions.Logging.LogLevel.Debug, new Microsoft.Extensions.Logging.EventId(20001, "opti-1"), "Inspecting {module} for regular expressions reference.");
		
		private static System.Action<Microsoft.Extensions.Logging.ILogger, dnlib.DotNet.IModule, System.Exception> _regexReferencesFound = Microsoft.Extensions.Logging.LoggerMessage.Define<dnlib.DotNet.IModule>(Microsoft.Extensions.Logging.LogLevel.Trace, new Microsoft.Extensions.Logging.EventId(20002, "opti-2"), "Found regular expression references in {module}.");
		
		private static System.Action<Microsoft.Extensions.Logging.ILogger, dnlib.DotNet.IModule, System.Exception> _noRegexReferencesFound = Microsoft.Extensions.Logging.LoggerMessage.Define<dnlib.DotNet.IModule>(Microsoft.Extensions.Logging.LogLevel.Trace, new Microsoft.Extensions.Logging.EventId(20003, "opti-3"), "No regular expression references found in {module}.");
		
		private static System.Action<Microsoft.Extensions.Logging.ILogger, dnlib.DotNet.IMethod, System.Exception> _extractFromMethod = Microsoft.Extensions.Logging.LoggerMessage.Define<dnlib.DotNet.IMethod>(Microsoft.Extensions.Logging.LogLevel.Trace, new Microsoft.Extensions.Logging.EventId(20004, "opti-4"), "Trying to extract regular expressions from the method {method}.");
		
		private static System.Action<Microsoft.Extensions.Logging.ILogger, dnlib.DotNet.IMethod, FormatHelper0, System.Exception> _foundRegexReferenceInMethod = Microsoft.Extensions.Logging.LoggerMessage.Define<dnlib.DotNet.IMethod, FormatHelper0>(Microsoft.Extensions.Logging.LogLevel.Debug, new Microsoft.Extensions.Logging.EventId(20005, "opti-5"), "Found reference to regular expression in method {scannedMethod}: {analyzerResult}" +
				"");
		
		private static System.Action<Microsoft.Extensions.Logging.ILogger, dnlib.DotNet.IMethod, System.Exception> _skippedRegexNotCompiled = Microsoft.Extensions.Logging.LoggerMessage.Define<dnlib.DotNet.IMethod>(Microsoft.Extensions.Logging.LogLevel.Trace, new Microsoft.Extensions.Logging.EventId(20006, "opti-6"), "Skipped the RegEx call in {method}, because it is not marked with RegexOptions.Co" +
				"mpiled.");
		
		private static System.Action<Microsoft.Extensions.Logging.ILogger, dnlib.DotNet.IModule, int, System.Exception> _regexCompilingForModule = Microsoft.Extensions.Logging.LoggerMessage.Define<dnlib.DotNet.IModule, int>(Microsoft.Extensions.Logging.LogLevel.Debug, new Microsoft.Extensions.Logging.EventId(20007, "opti-7"), "Compiling {count} expressions in module {module}");
		
		private static System.Action<Microsoft.Extensions.Logging.ILogger, FormatHelper1, System.Exception> _regexFinishedCompiling = Microsoft.Extensions.Logging.LoggerMessage.Define<FormatHelper1>(Microsoft.Extensions.Logging.LogLevel.Trace, new Microsoft.Extensions.Logging.EventId(20008, "opti-8"), "Compiled regular expression to: {compilerResult}");
		
		private static System.Action<Microsoft.Extensions.Logging.ILogger, FormatHelper2, System.Exception> _regexSkippedBrokenExpression = Microsoft.Extensions.Logging.LoggerMessage.Define<FormatHelper2>(Microsoft.Extensions.Logging.LogLevel.Warning, new Microsoft.Extensions.Logging.EventId(20009, "opti-9"), "Skipping broken expression: {compileDef}");
		
		private static System.Action<Microsoft.Extensions.Logging.ILogger, System.Exception> _invalidRegexPatternFound = Microsoft.Extensions.Logging.LoggerMessage.Define(Microsoft.Extensions.Logging.LogLevel.Critical, new Microsoft.Extensions.Logging.EventId(20010, "opti-10"), "Invalid regular expression pattern found.");
		
		private static System.Action<Microsoft.Extensions.Logging.ILogger, FormatHelper2, System.Exception> _skippedUnsafe = Microsoft.Extensions.Logging.LoggerMessage.Define<FormatHelper2>(Microsoft.Extensions.Logging.LogLevel.Debug, new Microsoft.Extensions.Logging.EventId(20011, "opti-11"), "Skipped compilation of culture unsafe expression: {compileDef}");
		
		private static System.Action<Microsoft.Extensions.Logging.ILogger, FormatHelper0, FormatHelper3, System.Exception> _noMatchingTargetMethod = Microsoft.Extensions.Logging.LoggerMessage.Define<FormatHelper0, FormatHelper3>(Microsoft.Extensions.Logging.LogLevel.Warning, new Microsoft.Extensions.Logging.EventId(20012, "opti-12"), "The regular expression \"{compilerResult}\" was compiled, but the required target m" +
				"ethod for \"{analyzerResult}\" was not found.");
		
		private static System.Action<Microsoft.Extensions.Logging.ILogger, FormatHelper3, dnlib.DotNet.IMethod, System.Exception> _injectSuccessful = Microsoft.Extensions.Logging.LoggerMessage.Define<FormatHelper3, dnlib.DotNet.IMethod>(Microsoft.Extensions.Logging.LogLevel.Trace, new Microsoft.Extensions.Logging.EventId(20013, "opti-13"), "The compiled regular expression \"{compilerResult}\", was injected into \"{injection" +
				"TargetMethod}\".");
		
		private static System.Action<Microsoft.Extensions.Logging.ILogger, int, dnlib.DotNet.IModule, System.Exception> _compileSummary = Microsoft.Extensions.Logging.LoggerMessage.Define<int, dnlib.DotNet.IModule>(Microsoft.Extensions.Logging.LogLevel.Information, new Microsoft.Extensions.Logging.EventId(20014, "opti-14"), "Compiled {count} regular expressions in module \"{module}\".");
		
		/// <summary>
		/// Show the following Debug log entry:
		/// <br/>
		/// Inspecting {module} for regular expressions reference.
		/// </summary>
		/// <exception cref="System.ArgumentNullException"><paramref name="logger"/> is <see langword="null"/></exception>
		/// <remarks>
		/// Log Event ID: <c>opti-1</c>
		/// </remarks>
		internal static void LogMsgInspectingModule(this Microsoft.Extensions.Logging.ILogger logger, dnlib.DotNet.IModule module) {
			if ((logger == null)) {
				throw new System.ArgumentNullException("logger");
			}
			_inspectingModule.Invoke(logger, module, null);
		}
		
		/// <summary>
		/// Show the following Trace log entry:
		/// <br/>
		/// Found regular expression references in {module}.
		/// </summary>
		/// <exception cref="System.ArgumentNullException"><paramref name="logger"/> is <see langword="null"/></exception>
		/// <remarks>
		/// Log Event ID: <c>opti-2</c>
		/// </remarks>
		internal static void LogMsgRegexReferencesFound(this Microsoft.Extensions.Logging.ILogger logger, dnlib.DotNet.IModule module) {
			if ((logger == null)) {
				throw new System.ArgumentNullException("logger");
			}
			_regexReferencesFound.Invoke(logger, module, null);
		}
		
		/// <summary>
		/// Show the following Trace log entry:
		/// <br/>
		/// No regular expression references found in {module}.
		/// </summary>
		/// <exception cref="System.ArgumentNullException"><paramref name="logger"/> is <see langword="null"/></exception>
		/// <remarks>
		/// Log Event ID: <c>opti-3</c>
		/// </remarks>
		internal static void LogMsgNoRegexReferencesFound(this Microsoft.Extensions.Logging.ILogger logger, dnlib.DotNet.IModule module) {
			if ((logger == null)) {
				throw new System.ArgumentNullException("logger");
			}
			_noRegexReferencesFound.Invoke(logger, module, null);
		}
		
		/// <summary>
		/// Show the following Trace log entry:
		/// <br/>
		/// Trying to extract regular expressions from the method {method}.
		/// </summary>
		/// <exception cref="System.ArgumentNullException"><paramref name="logger"/> is <see langword="null"/></exception>
		/// <remarks>
		/// Log Event ID: <c>opti-4</c>
		/// </remarks>
		internal static void LogMsgExtractFromMethod(this Microsoft.Extensions.Logging.ILogger logger, dnlib.DotNet.IMethod method) {
			if ((logger == null)) {
				throw new System.ArgumentNullException("logger");
			}
			_extractFromMethod.Invoke(logger, method, null);
		}
		
		/// <summary>
		/// Show the following Debug log entry:
		/// <br/>
		/// Found reference to regular expression in method {scannedMethod}: {analyzerResult}
		/// </summary>
		/// <exception cref="System.ArgumentNullException"><paramref name="logger"/> is <see langword="null"/></exception>
		/// <remarks>
		/// Log Event ID: <c>opti-5</c>
		/// </remarks>
		internal static void LogMsgFoundRegexReferenceInMethod(this Microsoft.Extensions.Logging.ILogger logger, dnlib.DotNet.IMethod scannedMethod, MethodAnalyzerResult analyzerResult) {
			if ((logger == null)) {
				throw new System.ArgumentNullException("logger");
			}
			FormatHelper0 analyzerResultFormatter = new FormatHelper0();
			analyzerResultFormatter._sourceValue = analyzerResult;
			_foundRegexReferenceInMethod.Invoke(logger, scannedMethod, analyzerResultFormatter, null);
		}
		
		/// <summary>
		/// Show the following Trace log entry:
		/// <br/>
		/// Skipped the RegEx call in {method}, because it is not marked with RegexOptions.Compiled.
		/// </summary>
		/// <exception cref="System.ArgumentNullException"><paramref name="logger"/> is <see langword="null"/></exception>
		/// <remarks>
		/// Log Event ID: <c>opti-6</c>
		/// </remarks>
		internal static void LogMsgSkippedRegexNotCompiled(this Microsoft.Extensions.Logging.ILogger logger, dnlib.DotNet.IMethod method) {
			if ((logger == null)) {
				throw new System.ArgumentNullException("logger");
			}
			_skippedRegexNotCompiled.Invoke(logger, method, null);
		}
		
		/// <summary>
		/// Show the following Debug log entry:
		/// <br/>
		/// Compiling {count} expressions in module {module}
		/// </summary>
		/// <exception cref="System.ArgumentNullException"><paramref name="logger"/> is <see langword="null"/></exception>
		/// <remarks>
		/// Log Event ID: <c>opti-7</c>
		/// </remarks>
		internal static void LogMsgRegexCompilingForModule(this Microsoft.Extensions.Logging.ILogger logger, dnlib.DotNet.IModule module, int count) {
			if ((logger == null)) {
				throw new System.ArgumentNullException("logger");
			}
			_regexCompilingForModule.Invoke(logger, module, count, null);
		}
		
		/// <summary>
		/// Show the following Trace log entry:
		/// <br/>
		/// Compiled regular expression to: {compilerResult}
		/// </summary>
		/// <exception cref="System.ArgumentNullException"><paramref name="logger"/> is <see langword="null"/></exception>
		/// <remarks>
		/// Log Event ID: <c>opti-8</c>
		/// </remarks>
		internal static void LogMsgRegexFinishedCompiling(this Microsoft.Extensions.Logging.ILogger logger, Compiler.RegexCompilerResult compilerResult) {
			if ((logger == null)) {
				throw new System.ArgumentNullException("logger");
			}
			FormatHelper1 compilerResultFormatter = new FormatHelper1();
			compilerResultFormatter._sourceValue = compilerResult;
			_regexFinishedCompiling.Invoke(logger, compilerResultFormatter, null);
		}
		
		/// <summary>
		/// Show the following Warning log entry:
		/// <br/>
		/// Skipping broken expression: {compileDef}
		/// </summary>
		/// <exception cref="System.ArgumentNullException"><paramref name="logger"/> is <see langword="null"/></exception>
		/// <remarks>
		/// Log Event ID: <c>opti-9</c>
		/// </remarks>
		internal static void LogMsgRegexSkippedBrokenExpression(this Microsoft.Extensions.Logging.ILogger logger, RegexCompileDef compileDef) {
			if ((logger == null)) {
				throw new System.ArgumentNullException("logger");
			}
			FormatHelper2 compileDefFormatter = new FormatHelper2();
			compileDefFormatter._sourceValue = compileDef;
			_regexSkippedBrokenExpression.Invoke(logger, compileDefFormatter, null);
		}
		
		/// <summary>
		/// Show the following Critical log entry:
		/// <br/>
		/// Invalid regular expression pattern found.
		/// </summary>
		/// <exception cref="System.ArgumentNullException"><paramref name="logger"/> is <see langword="null"/></exception>
		/// <remarks>
		/// Log Event ID: <c>opti-10</c>
		/// </remarks>
		internal static void LogMsgInvalidRegexPatternFound(this Microsoft.Extensions.Logging.ILogger logger, System.Exception exception) {
			if ((logger == null)) {
				throw new System.ArgumentNullException("logger");
			}
			_invalidRegexPatternFound.Invoke(logger, exception);
		}
		
		/// <summary>
		/// Show the following Debug log entry:
		/// <br/>
		/// Skipped compilation of culture unsafe expression: {compileDef}
		/// </summary>
		/// <exception cref="System.ArgumentNullException"><paramref name="logger"/> is <see langword="null"/></exception>
		/// <remarks>
		/// Log Event ID: <c>opti-11</c>
		/// </remarks>
		internal static void LogMsgSkippedUnsafe(this Microsoft.Extensions.Logging.ILogger logger, RegexCompileDef compileDef) {
			if ((logger == null)) {
				throw new System.ArgumentNullException("logger");
			}
			FormatHelper2 compileDefFormatter = new FormatHelper2();
			compileDefFormatter._sourceValue = compileDef;
			_skippedUnsafe.Invoke(logger, compileDefFormatter, null);
		}
		
		/// <summary>
		/// Show the following Warning log entry:
		/// <br/>
		/// The regular expression "{compilerResult}" was compiled, but the required target method for "{analyzerResult}" was not found.
		/// </summary>
		/// <exception cref="System.ArgumentNullException"><paramref name="logger"/> is <see langword="null"/></exception>
		/// <remarks>
		/// Log Event ID: <c>opti-12</c>
		/// </remarks>
		internal static void LogMsgNoMatchingTargetMethod(this Microsoft.Extensions.Logging.ILogger logger, MethodAnalyzerResult analyzerResult, Compiler.RegexCompilerResult compilerResult) {
			if ((logger == null)) {
				throw new System.ArgumentNullException("logger");
			}
			FormatHelper0 analyzerResultFormatter = new FormatHelper0();
			analyzerResultFormatter._sourceValue = analyzerResult;
			FormatHelper3 compilerResultFormatter = new FormatHelper3();
			compilerResultFormatter._sourceValue = compilerResult;
			_noMatchingTargetMethod.Invoke(logger, analyzerResultFormatter, compilerResultFormatter, null);
		}
		
		/// <summary>
		/// Show the following Trace log entry:
		/// <br/>
		/// The compiled regular expression "{compilerResult}", was injected into "{injectionTargetMethod}".
		/// </summary>
		/// <exception cref="System.ArgumentNullException"><paramref name="logger"/> is <see langword="null"/></exception>
		/// <remarks>
		/// Log Event ID: <c>opti-13</c>
		/// </remarks>
		internal static void LogMsgInjectSuccessful(this Microsoft.Extensions.Logging.ILogger logger, Compiler.RegexCompilerResult compilerResult, dnlib.DotNet.IMethod injectionTargetMethod) {
			if ((logger == null)) {
				throw new System.ArgumentNullException("logger");
			}
			FormatHelper3 compilerResultFormatter = new FormatHelper3();
			compilerResultFormatter._sourceValue = compilerResult;
			_injectSuccessful.Invoke(logger, compilerResultFormatter, injectionTargetMethod, null);
		}
		
		/// <summary>
		/// Show the following Information log entry:
		/// <br/>
		/// Compiled {count} regular expressions in module "{module}".
		/// </summary>
		/// <exception cref="System.ArgumentNullException"><paramref name="logger"/> is <see langword="null"/></exception>
		/// <remarks>
		/// Log Event ID: <c>opti-14</c>
		/// </remarks>
		internal static void LogMsgCompileSummary(this Microsoft.Extensions.Logging.ILogger logger, int count, dnlib.DotNet.IModule module) {
			if ((logger == null)) {
				throw new System.ArgumentNullException("logger");
			}
			_compileSummary.Invoke(logger, count, module, null);
		}
		
		private struct FormatHelper0 : System.IFormattable {
			
			internal MethodAnalyzerResult _sourceValue;
			
			public string ToString(string format, System.IFormatProvider formatProvider) {
				object resultObj = this._sourceValue.RegexMethod;
				if ((resultObj is System.IFormattable)) {
					return ((System.IFormattable)(resultObj)).ToString(format, formatProvider);
				}
				else {
					return resultObj.ToString();
				}
			}
			
			public override string ToString() {
				return this.ToString(null, null);
			}
		}
		
		private struct FormatHelper1 : System.IFormattable {
			
			internal Compiler.RegexCompilerResult _sourceValue;
			
			public string ToString(string format, System.IFormatProvider formatProvider) {
				object resultObj = this._sourceValue.RegexTypeDef;
				if ((resultObj is System.IFormattable)) {
					return ((System.IFormattable)(resultObj)).ToString(format, formatProvider);
				}
				else {
					return resultObj.ToString();
				}
			}
			
			public override string ToString() {
				return this.ToString(null, null);
			}
		}
		
		private struct FormatHelper2 : System.IFormattable {
			
			internal RegexCompileDef _sourceValue;
			
			public string ToString(string format, System.IFormatProvider formatProvider) {
				object resultObj = this._sourceValue.Pattern;
				if ((resultObj is System.IFormattable)) {
					return ((System.IFormattable)(resultObj)).ToString(format, formatProvider);
				}
				else {
					return resultObj.ToString();
				}
			}
			
			public override string ToString() {
				return this.ToString(null, null);
			}
		}
		
		private struct FormatHelper3 : System.IFormattable {
			
			internal Compiler.RegexCompilerResult _sourceValue;
			
			public string ToString(string format, System.IFormatProvider formatProvider) {
				object resultObj = this._sourceValue.CompileDef.Pattern;
				if ((resultObj is System.IFormattable)) {
					return ((System.IFormattable)(resultObj)).ToString(format, formatProvider);
				}
				else {
					return resultObj.ToString();
				}
			}
			
			public override string ToString() {
				return this.ToString(null, null);
			}
		}
	}
}
